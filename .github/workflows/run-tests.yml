name: 'Run Tests from Azure DevOps Card'

on:
  workflow_dispatch:
    inputs:
      markers:
        description: 'Pytest markers to run (e.g., smoke, regression)'
        required: true
        type: string
        default: 'smoke'
      customer:
        description: 'Customer configuration to use'
        required: false
        type: string
        default: 'demo'
      browsers:
        description: 'Browsers to test (chrome, edge, firefox, webkit)'
        required: false
        type: string
        default: 'chrome'
      work_item_id:
        description: 'Azure DevOps work item ID'
        required: false
        type: string
      work_item_title:
        description: 'Azure DevOps work item title'
        required: false
        type: string
      system_url:
        description: 'System URL to test (optional override)'
        required: false
        type: string

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: ${{ fromJson(format('["{0}"]', github.event.inputs.browsers || 'chrome')) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        working-directory: TestScriptGeneratorBOT
        run: |
          pip install -r requirements.txt

      - name: Install Playwright browsers
        working-directory: TestScriptGeneratorBOT
        run: |
          playwright install ${{ matrix.browser }}

      - name: Display Test Information
        run: |
          echo "Work Item ID: ${{ github.event.inputs.work_item_id }}"
          echo "Work Item Title: ${{ github.event.inputs.work_item_title }}"
          echo "Test Markers: ${{ github.event.inputs.markers }}"
          echo "Customer: ${{ github.event.inputs.customer }}"
          echo "Browser: ${{ matrix.browser }}"
          echo "System URL: ${{ github.event.inputs.system_url }}"

      - name: Run automated tests
        working-directory: TestScriptGeneratorBOT
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          AZURE_CONCATENATION_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_CONCATENATION_STORAGE_CONNECTION_STRING }}
          AZURE_CONCATENATION_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_CONCATENATION_STORAGE_CONTAINER_NAME }}
          AZURE_AUTOMATION_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_AUTOMATION_STORAGE_CONNECTION_STRING }}
          AZURE_AUTOMATION_MEDIA_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_AUTOMATION_MEDIA_STORAGE_CONTAINER_NAME }}
        run: |
          # Run tests based on markers provided by MCP monitor
          pytest -v --customer "${{ github.event.inputs.customer }}" \
                 -m "${{ github.event.inputs.markers }}" \
                 --browser "${{ matrix.browser }}" \
                 --html=reports/report_${{ matrix.browser }}_${{ github.event.inputs.work_item_id }}.html \
                 --self-contained-html

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.browser }}-workitem-${{ github.event.inputs.work_item_id }}
          path: TestScriptGeneratorBOT/reports/
          retention-days: 30

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-screenshots-${{ matrix.browser }}-workitem-${{ github.event.inputs.work_item_id }}
          path: TestScriptGeneratorBOT/screenshots/
          retention-days: 7

      - name: Comment on Azure DevOps Work Item
        if: always()
        run: |
          echo "Test execution completed for Work Item ${{ github.event.inputs.work_item_id }}"
          echo "Test Results: ${{ job.status }}"
          echo "Markers: ${{ github.event.inputs.markers }}"
          echo "Customer: ${{ github.event.inputs.customer }}"
          echo "Browser: ${{ matrix.browser }}"
