name: Azure DevOps Triggered Tests

on:
  workflow_dispatch:
    inputs:
      work_item_id:
        description: 'Azure DevOps Work Item ID'
        required: true
        type: string
      test_cases:
        description: 'Test cases to run (JSON array)'
        required: false
        type: string
        default: '[]'
      work_item_title:
        description: 'Work Item Title'
        required: false
        type: string
      work_item_type:
        description: 'Work Item Type'
        required: false
        type: string
      work_item_state:
        description: 'Work Item State'
        required: false
        type: string
      assigned_to:
        description: 'Assigned To'
        required: false
        type: string
      board_column:
        description: 'Board Column'
        required: false
        type: string
      test_command:
        description: 'Test command to execute'
        required: false
        type: string
        default: 'pytest'
      trigger_source:
        description: 'Source that triggered this workflow'
        required: false
        type: string
      timestamp:
        description: 'Trigger timestamp'
        required: false
        type: string
      target_branch:
        description: 'Target branch for testing'
        required: false
        type: string
        default: 'main'
      associated_branch:
        description: 'Branch associated with the work item'
        required: false
        type: string

env:
  WORK_ITEM_ID: ${{ github.event.inputs.work_item_id }}
  WORK_ITEM_TITLE: ${{ github.event.inputs.work_item_title }}
  WORK_ITEM_TYPE: ${{ github.event.inputs.work_item_type }}
  TRIGGER_SOURCE: ${{ github.event.inputs.trigger_source }}

jobs:
  test-setup:
    name: Test Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      test-cases: ${{ steps.parse-inputs.outputs.test-cases }}
      test-command: ${{ steps.parse-inputs.outputs.test-command }}
      should-run-tests: ${{ steps.parse-inputs.outputs.should-run-tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Parse workflow inputs
      id: parse-inputs
      run: |
        echo "Parsing workflow inputs..."
        echo "Work Item ID: ${{ github.event.inputs.work_item_id }}"
        echo "Work Item Title: ${{ github.event.inputs.work_item_title }}"
        echo "Test Cases: ${{ github.event.inputs.test_cases }}"
        
        # Parse test cases JSON
        TEST_CASES='${{ github.event.inputs.test_cases }}'
        if [ -z "$TEST_CASES" ] || [ "$TEST_CASES" = "[]" ]; then
          echo "No specific test cases provided, will run default tests"
          echo "test-cases=[]" >> $GITHUB_OUTPUT
          echo "test-command=pytest" >> $GITHUB_OUTPUT
          echo "should-run-tests=true" >> $GITHUB_OUTPUT
        else
          echo "test-cases=$TEST_CASES" >> $GITHUB_OUTPUT
          echo "test-command=${{ github.event.inputs.test_command }}" >> $GITHUB_OUTPUT
          echo "should-run-tests=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate inputs
      run: |
        if [ -z "${{ github.event.inputs.work_item_id }}" ]; then
          echo "❌ Work Item ID is required"
          exit 1
        fi
        
        echo "✅ Workflow triggered for Work Item ${{ github.event.inputs.work_item_id }}"
        echo "📋 Title: ${{ github.event.inputs.work_item_title }}"
        echo "🏷️ Type: ${{ github.event.inputs.work_item_type }}"
        echo "📍 State: ${{ github.event.inputs.work_item_state }}"
        echo "👤 Assigned: ${{ github.event.inputs.assigned_to }}"
        echo "📊 Column: ${{ github.event.inputs.board_column }}"
        echo "🚀 Source: ${{ github.event.inputs.trigger_source }}"
        echo "🌿 Target Branch: ${{ github.event.inputs.target_branch }}"
        echo "🔗 Associated Branch: ${{ github.event.inputs.associated_branch }}"

  run-tests:
    name: Run Automated Tests
    runs-on: ubuntu-latest
    needs: test-setup
    if: needs.test-setup.outputs.should-run-tests == 'true'
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install main dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install test dependencies
        if [ -f requirements-test.txt ]; then
          pip install -r requirements-test.txt
        else
          # Install common testing packages
          pip install pytest pytest-cov pytest-xdist pytest-html
        fi
        
        # Install additional testing tools
        pip install coverage[toml] bandit safety
    
    - name: Run linting and security checks
      run: |
        echo "🔍 Running code quality checks..."
        
        # Run flake8 if available
        if command -v flake8 &> /dev/null; then
          echo "Running flake8..."
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || true
        fi
        
        # Run security check with bandit
        echo "Running security check..."
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Check for known security vulnerabilities
        echo "Checking for known security vulnerabilities..."
        safety check --json --output safety-report.json || true
    
    - name: Run specific test cases
      if: needs.test-setup.outputs.test-cases != '[]'
      run: |
        echo "🧪 Running specific test cases for Work Item ${{ github.event.inputs.work_item_id }}"
        
        TEST_CASES='${{ needs.test-setup.outputs.test-cases }}'
        TEST_COMMAND='${{ needs.test-setup.outputs.test-command }}'
        
        echo "Test cases: $TEST_CASES"
        echo "Test command: $TEST_COMMAND"
        
        # Create test results directory
        mkdir -p test-results
        
        # Run the specified test command
        $TEST_COMMAND \
          --junitxml=test-results/pytest-results.xml \
          --html=test-results/pytest-report.html \
          --cov=src \
          --cov-report=xml:test-results/coverage.xml \
          --cov-report=html:test-results/coverage-html \
          -v
    
    - name: Run default tests
      if: needs.test-setup.outputs.test-cases == '[]'
      run: |
        echo "🧪 Running default test suite for Work Item ${{ github.event.inputs.work_item_id }}"
        
        # Create test results directory
        mkdir -p test-results
        
        # Run all tests
        pytest \
          --junitxml=test-results/pytest-results.xml \
          --html=test-results/pytest-report.html \
          --cov=src \
          --cov-report=xml:test-results/coverage.xml \
          --cov-report=html:test-results/coverage-html \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          test-results/
          bandit-report.json
          safety-report.json
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (Python ${{ matrix.python-version }})
        path: test-results/pytest-results.xml
        reporter: java-junit
        fail-on-error: false

  test-summary:
    name: Test Summary and Reporting
    runs-on: ubuntu-latest
    needs: [test-setup, run-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Work Item**: ${{ github.event.inputs.work_item_id }} - ${{ github.event.inputs.work_item_title }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by**: ${{ github.event.inputs.trigger_source }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: ${{ github.event.inputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check test results
        if [ "${{ needs.run-tests.result }}" = "success" ]; then
          echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.run-tests.result }}" = "failure" ]; then
          echo "❌ **Some tests failed. Please review the results.**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Tests completed with warnings or were skipped.**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Work Item Type**: ${{ github.event.inputs.work_item_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Current State**: ${{ github.event.inputs.work_item_state }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Board Column**: ${{ github.event.inputs.board_column }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Assigned To**: ${{ github.event.inputs.assigned_to }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Branch**: ${{ github.event.inputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Associated Branch**: ${{ github.event.inputs.associated_branch }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.test_cases }}" != "[]" ]; then
          echo "- **Specific Test Cases**: Yes" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Test Scope**: Full test suite" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Create status badge
      run: |
        # Create a simple status badge based on results
        if [ "${{ needs.run-tests.result }}" = "success" ]; then
          echo "![Tests](https://img.shields.io/badge/Tests-Passing-brightgreen)" >> $GITHUB_STEP_SUMMARY
        else
          echo "![Tests](https://img.shields.io/badge/Tests-Failed-red)" >> $GITHUB_STEP_SUMMARY
        fi
    
    # Optional: Post results back to Azure DevOps (would require additional setup)
    - name: Post results to Azure DevOps
      if: false  # Enable this step by changing to true and configuring Azure DevOps API
      run: |
        # This would post test results back to the Azure DevOps work item
        # Requires Azure DevOps API configuration
        echo "Would post results back to Azure DevOps Work Item ${{ github.event.inputs.work_item_id }}"
