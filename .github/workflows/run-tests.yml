name: Run Tests from Azure DevOps Card

on:
  workflow_dispatch:
    inputs:
      test_case_ids:
        description: 'Comma-separated test case IDs from Azure DevOps card'
        required: true
        type: string
      work_item_id:
        description: 'Azure DevOps work item ID'
        required: false
        type: string
      work_item_title:
        description: 'Azure DevOps work item title'
        required: false
        type: string
      customer:
        description: 'Customer configuration to use'
        required: false
        default: 'demo'
        type: string

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        working-directory: TestScriptGeneratorBOT
        run: |
          pip install -r requirements.txt

      - name: Install Playwright browsers
        working-directory: TestScriptGeneratorBOT
        run: |
          playwright install chromium

      - name: Create necessary directories
        working-directory: TestScriptGeneratorBOT
        run: |
          mkdir -p screenshots reports recordings download

      - name: Run tests based on MCP discovered test cases
        working-directory: TestScriptGeneratorBOT
        env:
          TEST_CASE_IDS: ${{ github.event.inputs.test_case_ids }}
          WORK_ITEM_ID: ${{ github.event.inputs.work_item_id }}
          CUSTOMER: ${{ github.event.inputs.customer }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          AZURE_CONCATENATION_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_CONCATENATION_STORAGE_CONNECTION_STRING }}
          AZURE_CONCATENATION_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_CONCATENATION_STORAGE_CONTAINER_NAME }}
          AZURE_AUTOMATION_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_AUTOMATION_STORAGE_CONNECTION_STRING }}
          AZURE_AUTOMATION_MEDIA_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_AUTOMATION_MEDIA_STORAGE_CONTAINER_NAME }}
        run: |
          echo "=== MCP Triggered Test Execution ==="
          echo "Work Item ID: $WORK_ITEM_ID"
          echo "Work Item Title: ${{ github.event.inputs.work_item_title }}"
          echo "Test Case IDs: $TEST_CASE_IDS"
          echo "Customer: $CUSTOMER"
          echo "=================================="
          
          # Map MCP discovered test case IDs to pytest execution
          if [[ "$TEST_CASE_IDS" == *"image_upload_test"* ]]; then
            echo "Running image upload tests..."
            pytest -v --customer $CUSTOMER -m "smoke or image_upload" || true
          fi
          
          if [[ "$TEST_CASE_IDS" == *"video_upload_test"* ]]; then
            echo "Running video upload tests..."
            pytest -v --customer $CUSTOMER -m "smoke or video_upload" || true
          fi
          
          if [[ "$TEST_CASE_IDS" == *"search_test"* ]]; then
            echo "Running search tests..."
            pytest -v --customer $CUSTOMER -m "smoke or search" || true
          fi
          
          if [[ "$TEST_CASE_IDS" == *"collection_test"* ]]; then
            echo "Running collection tests..."
            pytest -v --customer $CUSTOMER -m "smoke or collection" || true
          fi
          
          if [[ "$TEST_CASE_IDS" == *"download_test"* ]]; then
            echo "Running download tests..."
            pytest -v --customer $CUSTOMER -m "smoke or download" || true
          fi
          
          if [[ "$TEST_CASE_IDS" == *"smoke_test"* || "$TEST_CASE_IDS" == *"basic_workflow_test"* ]]; then
            echo "Running smoke tests..."
            pytest -v --customer $CUSTOMER -m "smoke" || true
          fi
          
          if [[ "$TEST_CASE_IDS" == *"concatenation_test"* ]]; then
            echo "Running concatenation tests..."
            pytest -v --customer $CUSTOMER -m "concatenation" || true
          fi
          
          # If no specific tests matched, run smoke tests as default
          if [[ ! "$TEST_CASE_IDS" =~ (image_upload_test|video_upload_test|search_test|collection_test|download_test|smoke_test|basic_workflow_test|concatenation_test) ]]; then
            echo "No specific test mapping found, running default smoke tests..."
            pytest -v --customer $CUSTOMER -m "smoke" || true
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-test-results-${{ github.event.inputs.work_item_id }}-${{ github.run_number }}
          path: |
            TestScriptGeneratorBOT/screenshots/
            TestScriptGeneratorBOT/reports/
            TestScriptGeneratorBOT/recordings/
          retention-days: 30

      - name: Test execution summary
        if: always()
        run: |
          echo "=== MCP Test Execution Summary ==="
          echo "Work Item: ${{ github.event.inputs.work_item_id }}"
          echo "Test Cases: ${{ github.event.inputs.test_case_ids }}"
          echo "Customer: ${{ github.event.inputs.customer }}"
          echo "Workflow completed at: $(date)"
